<?php

/**
 * @file
 * Install, update and uninstall functions for the LRVSP module.
 */

use Drupal\Core\Database\Database;
use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\user\Entity\Role;
use Drupal\user\RoleInterface;

/**
 * Implements hook_requirements()
 */
function lrvsp_requirements($phase) {
  $requirements = [];

  // Check the database connection
  $requirements['requirement_python_database'] = [
    'title' => t('Python Database Connection'),
    'value' => t('Connected'),
    'severity' => REQUIREMENT_OK,
  ];

  try {
    // Attempt to get a connection to the 'python' database.
    Database::getConnection('default', 'python');
  } catch (\Exception $e) {
    // no database found, set requirement error
    $requirements['requirement_python_database']['value'] = t('Not connected');
    $requirements['requirement_python_database']['description'] = t('The connection to the python database could not be established. Please check your database settings.');
    $requirements['requirement_python_database']['severity'] = REQUIREMENT_ERROR;
  }

  return $requirements;
}

/**
 * Implements hook_module_preinstall()
 */
function lrvsp_module_preinstall() {
  // Create status vocabulary.
  $vocabulary = Vocabulary::create([
    'vid' => 'lrvsp_status',
    'name' => 'Status',
    'description' => 'The processing status of an uploaded file.',
  ]);
  $vocabulary->save();
  // add terms
  Term::create([
    'vid' => $vocabulary->id(),
    'name' => 'Processing',
  ])->save();
  Term::create([
    'vid' => $vocabulary->id(),
    'name' => 'Processed',
  ])->save();
  Term::create([
    'vid' => $vocabulary->id(),
    'name' => 'Failed',
  ])->save();
}

/**
 * Implements hook_install()
 */
function lrvsp_install() {
  // clear existing python database
  $pyDbConn = Database::getConnection('default','python');
  $transaction = $pyDbConn->startTransaction();
  $pyDbConn->delete("LinkObjs")->execute();
  $pyDbConn->delete("DocObjs")->execute();
  $pyDbConn->delete("FilePaths")->execute();
  unset($transaction);

  // set permissions
  // rolls
  $anonymous_role = Role::load(RoleInterface::ANONYMOUS_ID);
  $authenticated_role = Role::load(RoleInterface::AUTHENTICATED_ID);
  // permissions
  $generalRestPermissions = array(
    "get lrvsp_details",
    "get lrvsp_docs",
    "get lrvsp_links"
  );
  $restrictedRestPermissions = array(
    "get lrvsp_docfiles",
    "get lrvsp_status",
    "post lrvsp_create"
  );
  $entities = array(
    "lrvsp_doc",
    "lrvsp_docfile",
    "lrvsp_link"
  );

  // set general access rest endpoints
  foreach ($generalRestPermissions as $perm){
    $permission = 'restful '.$perm;
    $anonymous_role->grantPermission($permission);
    $authenticated_role->grantPermission($permission);
  }
  // set restricted access rest endpoints
  foreach ($restrictedRestPermissions as $perm){
    $permission = 'restful '.$perm;
    $authenticated_role->grantPermission($permission);
  }
  // set entity view permissions (general)
  foreach ($entities as $ent){
    $permission = 'view '.$ent;
    $anonymous_role->grantPermission($permission);
    $authenticated_role->grantPermission($permission);
  }
  // set entity create permissions (restricted)
  foreach ($entities as $ent){
    $permission = 'create '.$ent;
    $authenticated_role->grantPermission($permission);
    $permission = 'edit '.$ent;
    $authenticated_role->grantPermission($permission);
  }

  $anonymous_role->calculateDependencies();
  $authenticated_role->calculateDependencies();

  $anonymous_role->save();
  $authenticated_role->save();
}

/**
 * Implements hook_uninstall().
 */
function lrvsp_uninstall() {
  // delete vocab
  Vocabulary::load('lrvsp_status')?->delete();
}
